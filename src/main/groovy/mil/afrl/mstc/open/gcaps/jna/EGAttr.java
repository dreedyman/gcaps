package mil.afrl.mstc.open.gcaps.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /Users/dreedy/dev/src/projects/mstc/caps/EngSketchPad/src/EGADS/include/egadsTypes.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class EGAttr extends Structure {
	/**
	 * Attribute Name<br>
	 * C type : char*
	 */
	public Pointer name;
	/** Attribute Type */
	public int type;
	/** number of values */
	public int length;
	/** C type : vals_union */
	public vals_union vals;
	/** <i>native declaration : /Users/dreedy/dev/src/projects/mstc/caps/EngSketchPad/src/EGADS/include/egadsTypes.h:124</i> */
	public static class vals_union extends Union {
		/** single int -- length == 1 */
		public int integer;
		/**
		 * multiple ints<br>
		 * C type : int*
		 */
		public IntByReference integers;
		/** single double -- length == 1 */
		public double real;
		/**
		 * mutiple doubles<br>
		 * C type : double*
		 */
		public DoubleByReference reals;
		/**
		 * character string (no single char)<br>
		 * C type : char*
		 */
		public Pointer string;
		public vals_union() {
			super();
		}
		/** @param integer single int -- length == 1 */
		public vals_union(int integer) {
			super();
			this.integer = integer;
			setType(Integer.TYPE);
		}
		/**
		 * @param integers multiple ints<br>
		 * C type : int*
		 */
		public vals_union(IntByReference integers) {
			super();
			this.integers = integers;
			setType(IntByReference.class);
		}
		/** @param real single double -- length == 1 */
		public vals_union(double real) {
			super();
			this.real = real;
			setType(Double.TYPE);
		}
		/**
		 * @param reals mutiple doubles<br>
		 * C type : double*
		 */
		public vals_union(DoubleByReference reals) {
			super();
			this.reals = reals;
			setType(DoubleByReference.class);
		}
		/**
		 * @param string character string (no single char)<br>
		 * C type : char*
		 */
		public vals_union(Pointer string) {
			super();
			this.string = string;
			setType(Pointer.class);
		}
		public static class ByReference extends vals_union implements Structure.ByReference {
			
		};
		public static class ByValue extends vals_union implements Structure.ByValue {
			
		};
	};
	public EGAttr() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("name", "type", "length", "vals");
	}
	/**
	 * @param name Attribute Name<br>
	 * C type : char*<br>
	 * @param type Attribute Type<br>
	 * @param length number of values<br>
	 * @param vals C type : vals_union
	 */
	public EGAttr(Pointer name, int type, int length, vals_union vals) {
		super();
		this.name = name;
		this.type = type;
		this.length = length;
		this.vals = vals;
	}
	public EGAttr(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends EGAttr implements Structure.ByReference {
		public ByReference() { }
		public ByReference(Pointer p) { super(p); read(); }
	}
	public static class ByValue extends EGAttr implements Structure.ByValue {
		public ByValue() { }
		public ByValue(Pointer p) { super(p); read(); }
	}
}
