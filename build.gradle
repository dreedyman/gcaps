import java.text.SimpleDateFormat

/*
 * Distribution Statement
 *
 * This computer software has been developed under sponsorship of the United States Air Force Research Lab. Any further
 * distribution or use by anyone or any data contained therein, unless otherwise specifically provided for,
 * is prohibited without the written approval of AFRL/RQVC-MSTC, 2210 8th Street Bldg 146, Room 218, WPAFB, OH  45433
 *
 * Disclaimer
 *
 * This material was prepared as an account of work sponsored by an agency of the United States Government. Neither
 * the United States Government nor the United States Air Force, nor any of their employees, makes any warranty,
 * express or implied, or assumes any legal liability or responsibility for the accuracy, completeness, or usefulness
 * of any information, apparatus, product, or process disclosed, or represents that its use would not infringe privately
 * owned rights.
 */

apply plugin: 'maven'
apply plugin: 'groovy'

group = 'mil.afrl.mstc.open'
version = '0.1'

String hostName = InetAddress.getLocalHost().getHostName()
String address = InetAddress.getLocalHost().getHostAddress()
boolean enclave = (hostName.endsWith("wpafb.af.mil") || address.startsWith("10.131"))
boolean includeDeployerJars = project.hasProperty("rioDeployAdmin")

ext {
    espRoot = System.getenv("ESP_ROOT")
    nativeDistV = "6.2"
    modelingV = "3.5"
    distDir = "${project.projectDir.path}/../distributions/sorcer-modeling-${modelingV}"
    def versionProps = new Properties()
    file("${distDir}/configs/versions.properties").withReader { reader ->
        versionProps.load(reader)
    }
    rioVersion = versionProps['rio.version']
    rioHome = "${distDir}/rio-${rioVersion}"
}

/* Setup repositories */
repositories {
    mavenLocal()
    if (!enclave) {
        maven { url "http://www.rio-project.org/maven2" }
        mavenCentral()
    } else {
        maven { url "http://10.131.7.138:7001" }
    }
}

task publish(dependsOn: uploadArchives) {}

configurations {
    distribution
    distribution.extendsFrom(runtime)
    if(includeDeployerJars)
        deployerJars
}

uploadArchives {
    repositories.mavenDeployer {
        if(includeDeployerJars)
            configuration = configurations.deployerJars
        pom.whenConfigured {
            p -> p.dependencies = p.dependencies.findAll {
                dep -> dep.scope != "compile"
            }
        }
        /*
         * If not running on the enclave, use the uploadArchives task to publish to the Rio repository.
         * You must have valid credentials to do this
         */
        if(!enclave && includeDeployerJars) {
            repository(
                    url: "ftp://www.rio-project.org/maven2") {
                authentication(userName: rioDeployAdmin, password: rioDeployAdminPassword)
            }
            //repository (url: "file:./myrepo")
        } else {
            repository ( url: "http://10.131.7.138:7001" )
        }
    }
}

dependencies {
    compile "org.rioproject:rio-lib:${rioVersion}"
    compile "org.rioproject.monitor:monitor-api:${rioVersion}"
    compile "com.google.code.gson:gson:2.8.0"
    compile 'net.java.dev.jna:jna:4.2.2'
    testCompile "org.rioproject:rio-test:${rioVersion}"
    testCompile "junit:junit:4.12"
    testCompile "org.rioproject:webster:5.6.3"
    runtime "ch.qos.logback:logback-classic:1.1.3"
    runtime "ch.qos.logback:logback-core:1.1.3"
    runtime "org.rioproject.resolver:resolver-aether:${rioVersion}"

    //distribution "org.rioproject:distribution:${rioVersion}@zip"
    if(includeDeployerJars)
        deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"
}

def timestamp() {
    new SimpleDateFormat("MM.dd.yyyy, HH.mm a").format(new Date())
}

jar {
    manifest {
        attributes 'Main-Class': 'mil.afrl.mstc.open.gcaps.client.Master',
                   'Implementation-Version' : timestamp()
    }
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

processResources {
    filesMatching('**/systemProps.properties') {
        filter { it.replace("%VERSION%", project.version) }
    }
}

install.repositories.mavenInstaller.pom.whenConfigured { pom ->
    pom.dependencies.removeAll { it.scope == "test" }
}

clean.doLast {
    File grape = new File("${System.getProperty("user.home")}/.groovy/grapes/${project.group}/gcaps")
    if(grape.exists() && grape.deleteDir())
        println "Removed ${grape.path}"
    String repoPath = project.group.replace(".", "/")
    File artifactDir = new File("${System.getProperty("user.home")}/.m2/repository/${repoPath}/gcaps/$project.version")
    if(artifactDir.exists() && artifactDir.deleteDir())
        println "Removed ${artifactDir.path}"
}

/* Always run tests */
test.outputs.upToDateWhen { false }

test {
    reports {
        html.enabled = true
        junitXml.enabled = false
    }
    testLogging {
        events "passed", "skipped", "failed"/*, "standardOut", "standardError"*/
    }
    systemProperty "jna.library.path", "${espRoot}/lib/"
    systemProperty "native.open.dist", "${project.projectDir.path}/../distributions/native-lib-dist-open-${nativeDistV}"
    systemProperty "script.run.dir", "${project.buildDir.path}"
    systemProperty "projectDir", "${project.buildDir.path}"
    systemProperty "projectRoot", "${project.projectDir.path}"
    systemProperty "projectDataRoot", "${project.projectDir.path}/csmData"
    systemProperty "java.security.policy", "${project.projectDir.path}/src/test/config/policy.all"
    systemProperty "rio.home", "${rioHome}"
    systemProperty "org.rioproject.test.config", "${project.projectDir.path}/src/test/config/test-config.groovy"
}

task gatherDeps() {
    onlyIf {
        !new File("${distDir}/rio-${rioVersion}").exists()
    }
    doLast {
        /* Copy over distribution dependencies */
        project.configurations['distribution'].files.each { file ->
            String distDir = "${project.projectDir.path}/distributions"
            if (file.path.endsWith("distribution-${rioVersion}.zip")) {
                copy {
                    from(zipTree(file)) {
                        exclude '**/examples.zip'
                        exclude '**/docs/*'
                        exclude '**/index.html'
                    }
                    into "$distDir"
                }
                File docs = new File("$distDir/rio-${rioVersion}/docs")
                if (docs.exists())
                    docs.deleteDir()
                File hyperic = new File("$distDir/rio-${rioVersion}/lib/hyperic")
                if (hyperic.exists())
                    hyperic.deleteDir()
            }
        }
    }
}

test.dependsOn([install])
